/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null&&q==null) return true;  
        if(p==null||q==null) return false;  
        if(p.val!=q.val) return false;  
        return isSameTree(p.left, q.left)&&isSameTree(p.right, q.right);  
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        List<Integer> list1=new ArrayList();
        List<Integer> list2=new ArrayList();
        list1=changeList(p,list1);
        list2=changeList(q,list2);
        if(list1!=null)
            return list1.equals(list2);//List为空时不能调用函数
        else 
        {
            if(list2==null)
                return true;
            else
                return false;
        }
        
    }
    private List<Integer> changeList(TreeNode node,List<Integer> list){
        if(node==null)//需要考虑list没有元素的情况
        {
            return null;
        }
        list.add(node.val);
        boolean noexist=true;
        if(node.left!=null)
        {
            TreeNode left=node.left;
            noexist=false;
            list=changeList(left,list);//不能直接return，还有判断右边节点
        }
        if(node.right!=null)
        {
            TreeNode right=node.right;
            if(noexist)
                list.add(null);//需要判断左节点情况
            list=changeList(right,list);
        }
        return list;//最后一起返回
        
    }
}