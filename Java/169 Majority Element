class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}//time:O(nlogn) space:O(1)

class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer.Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(!map.containkey(nums[i])){
                map.put(nums[i],1);
            }else{
                map.put(nums[i],map.get(nums[i])++);
            }
            if(map.get(nums[i])>nums.length/2) return nums[i];
        }
    }
}//time:O(n) space:O(n)

class Solution {
    public int majorityElement(int[] nums) {
        int res=0,count=0;
        for(int i=0;i<nums.length;i++){
            if(count==0){
                res=nums[i];
                count++;
            }else{
                if(res==nums[i]){
                    count++;
                }else{
                    count--;
                }
            }
            if(count>nums.length/2) break;
        }
        return res;
    }
}//time:O(n) space:O(1)


//Time Limit Exceeded
/*
class Solution {
    public int majorityElement(int[] nums) {
        int m=nums.length/2;
        for(int i=0;i<nums.length;i++)
        {
            int count=0;
            for(int j=0;j<nums.length;j++)
            {
                if(nums[i]==nums[j])
                {
                    count++;
                }
                if(count>m)
                    return nums[i];
            }
        }
        return -1;
    }
}
*/
