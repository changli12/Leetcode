/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {//正确做法是利用queue结构，否则顺序不对
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if (root == null)
            return list;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        while (queue.size() != 0) {
            List<Integer> alist = new ArrayList<Integer>();
            for (TreeNode child : queue)
                alist.add(child.val);
            list.add(new ArrayList<Integer>(alist));
            Queue<TreeNode> queue2=queue;
            queue=new LinkedList<TreeNode>();
            for(TreeNode child:queue2){
                if (child.left != null)
                    queue.add(child.left);
                if (child.right != null)
                    queue.add(child.right);
            }
        }   
        return list;
        
    }
}





//错误做法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> List=new ArrayList<List<Integer>>();
        List<List<Integer>> Listl=new ArrayList<List<Integer>>();
        List<List<Integer>> Listr=new ArrayList<List<Integer>>();
        List<Integer> list=new ArrayList<>();
        List<Integer> listl=new ArrayList<>();
        List<Integer> listr=new ArrayList<>();
        List<Integer> list2=new ArrayList<>();
        if (root == null)
            return List;
        if(root.left!=null)
        {
            TreeNode left=root.left;
            listl.add(left.val);
            Listl=levelOrder(left);
            List.addAll(Listl);
            List.remove(listl);
            list2.add(left.val);
        }
        if(root.right!=null)
        {
            TreeNode right=root.right;
            Listr=levelOrder(right);
            listr.add(right.val);
            List.addAll(Listr);
            List.remove(listr);
            list2.add(right.val);
        }
        list.add(root.val);
        List.add(list);
        if(list2!=null&&list2.size()!=0)
            List.add(list2);
        return List;
    }
}