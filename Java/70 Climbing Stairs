class Solution {
    public int climbStairs(int n) {
        int[] A=new int[n]; 
        A[0]=1;
        if(n==1)
            return 1;
        A[1]=2;
        for(int i=2;i<n;i++){
            A[i]=A[i-1]+A[i-2];
        }
        return A[n-1];
    }
}
//递归 time：O(n) space:O(1)
class Solution {
    public int climbStairs(int n) {
        if(n==1)
            return 1;
        int onestep=1;
        int twostep=1;
        int res=0;
        for(int i=2;i<=n;i++)
        {
            res=onestep+twostep;
            twostep=onestep;
            onestep=res;
        }
        return res;
    }
}

//超出时间限制 斐波那契数列解法 time：O(n) space:O(n)
class Solution {
    public int climbStairs(int n) {
        if(n<=2)
            return n;
        else
            return climbStairs(n-1)+climbStairs(n-2);
    }
}